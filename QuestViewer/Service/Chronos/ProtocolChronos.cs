// Author: Igor compiler
// Compiler version: igorc 2.1.2
// DO NOT EDIT THIS FILE - it is machine generated

using QuestGraph.Core;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;

using JsonSerializer = Json.Serialization.JsonSerializer;

namespace QuestViewer
{
    public enum ChronosLogLevel
    {
        Trace = 1,
        Debug = 2,
        Info = 3,
        Notice = 4,
        Warning = 5,
        Error = 6,
        Fatal = 7,
    }

    public sealed class LogEntry
    {
        public ChronosLogLevel Level { get; set; }

        public System.DateTimeOffset Timestamp { get; set; }

        public Json.ImmutableJson Data { get; set; }

        public string Message { get; set; }

        public int MsgCount { get; set; } = 1;

        public int SeqId { get; set; } = 1;

        public LogEntry()
        {
        }

        public LogEntry(ChronosLogLevel level, System.DateTimeOffset timestamp, Json.ImmutableJson data, string message, int msgCount = 1, int seqId = 1)
        {
            if (timestamp == null)
                throw new System.ArgumentNullException(nameof(timestamp));
            if (data == null)
                throw new System.ArgumentNullException(nameof(data));
            if (message == null)
                throw new System.ArgumentNullException(nameof(message));

            this.Level = level;
            this.Timestamp = timestamp;
            this.Data = data;
            this.Message = message;
            this.MsgCount = msgCount;
            this.SeqId = seqId;
        }
    }

    public sealed class InvalidData : Igor.Services.CustomRemoteException
    {
        public string Reason { get; set; }
    }

    public sealed class ChronosLogLevelJsonSerializer : Json.Serialization.IJsonSerializer<ChronosLogLevel>, Json.Serialization.IJsonKeySerializer<ChronosLogLevel>
    {
        public static readonly ChronosLogLevelJsonSerializer Instance = new ChronosLogLevelJsonSerializer();

        public Json.ImmutableJson Serialize(ChronosLogLevel value)
        {
            return SerializeKey(value);
        }

        public ChronosLogLevel Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return DeserializeKey(json.AsString);
        }

        public string SerializeKey(ChronosLogLevel value)
        {
            return value switch
            {
                ChronosLogLevel.Trace => "trace",
                ChronosLogLevel.Debug => "debug",
                ChronosLogLevel.Info => "info",
                ChronosLogLevel.Notice => "notice",
                ChronosLogLevel.Warning => "warning",
                ChronosLogLevel.Error => "error",
                ChronosLogLevel.Fatal => "fatal",
                _ => throw new System.ArgumentOutOfRangeException(nameof(value))
            };
        }

        public ChronosLogLevel DeserializeKey(string jsonKey)
        {
            return jsonKey switch
            {
                "trace" => ChronosLogLevel.Trace,
                "debug" => ChronosLogLevel.Debug,
                "info" => ChronosLogLevel.Info,
                "notice" => ChronosLogLevel.Notice,
                "warning" => ChronosLogLevel.Warning,
                "error" => ChronosLogLevel.Error,
                "fatal" => ChronosLogLevel.Fatal,
                _ => throw new System.ArgumentOutOfRangeException(nameof(jsonKey))
            };
        }
    }

    public sealed class LogEntryJsonSerializer : Json.Serialization.IJsonSerializer<LogEntry>
    {
        public static readonly LogEntryJsonSerializer Instance = new LogEntryJsonSerializer();

        public Json.ImmutableJson Serialize(LogEntry value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            if (value.Timestamp == null)
                throw new System.ArgumentException("Required property Timestamp is null", nameof(value));
            if (value.Data == null)
                throw new System.ArgumentException("Required property Data is null", nameof(value));
            if (value.Message == null)
                throw new System.ArgumentException("Required property Message is null", nameof(value));

            return new Json.JsonObject
            {
                ["level"] = ChronosLogLevelJsonSerializer.Instance.Serialize(value.Level),
                ["timestamp"] = DateTimeOffsetJsonSerializer.Instance.Serialize(value.Timestamp),
                ["data"] = JsonSerializer.Json.Serialize(value.Data),
                ["message"] = JsonSerializer.String.Serialize(value.Message),
                ["msg_count"] = JsonSerializer.Int.Serialize(value.MsgCount),
                ["seq_id"] = JsonSerializer.Int.Serialize(value.SeqId)
            };
        }

        public LogEntry Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var level = ChronosLogLevelJsonSerializer.Instance.Deserialize(json["level"]);
            var timestamp = DateTimeOffsetJsonSerializer.Instance.Deserialize(json["timestamp"]);
            var data = JsonSerializer.Json.Deserialize(json["data"]);
            var message = JsonSerializer.String.Deserialize(json["message"]);
            int msgCount;
            if (json.AsObject.TryGetValue("msg_count", out var jsonMsgCount) && !jsonMsgCount.IsNull)
                msgCount = JsonSerializer.Int.Deserialize(jsonMsgCount);
            else
                msgCount = 1;
            int seqId;
            if (json.AsObject.TryGetValue("seq_id", out var jsonSeqId) && !jsonSeqId.IsNull)
                seqId = JsonSerializer.Int.Deserialize(jsonSeqId);
            else
                seqId = 1;
            return new LogEntry(level, timestamp, data, message, msgCount, seqId);
        }
    }

    public sealed class InvalidDataJsonSerializer : Json.Serialization.IJsonSerializer<InvalidData>
    {
        public static readonly InvalidDataJsonSerializer Instance = new InvalidDataJsonSerializer();

        public Json.ImmutableJson Serialize(InvalidData value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Reason == null)
                throw new System.ArgumentException("Required property Reason is null", nameof(value));
            return new Json.JsonObject
            {
                ["reason"] = JsonSerializer.String.Serialize(value.Reason)
            };
        }

        public InvalidData Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new InvalidData();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, InvalidData value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            value.Reason = JsonSerializer.String.Deserialize(json["reason"]);
        }
    }

    public interface IServiceChronosClientToServer
    {
        Task<ServiceChronos.LogResult> Log(string app, string component, string branch, string version, List<LogEntry> logs);
    }

    public interface IServiceChronosServerToClient
    {
    }

    public static class ServiceChronos
    {
        public class LogResult
        {
            public int Loaded { get; set; }

            public LogResult()
            {
            }

            public LogResult(int loaded)
            {
                this.Loaded = loaded;
            }
        }

        public abstract class ClientMessage
        {
        }

        public class Log : ClientMessage
        {
            public string App { get; set; }

            public string Component { get; set; }

            public string Branch { get; set; }

            public string Version { get; set; }

            public List<LogEntry> Logs { get; set; }

            public int RpcId { get; set; }
        }

        public abstract class ServerMessage
        {
        }

        public class LogResponse : ServerMessage
        {
            public int RpcId { get; set; }

            public LogResult Result { get; set; }

            public System.Exception? Exception { get; set; }

            public bool IsSuccess => Exception == null;
        }
    }

    public static class ServiceChronosJsonSerializer
    {
        public sealed class ClientMessage : Json.Serialization.IJsonSerializer<ServiceChronos.ClientMessage>
        {
            public static readonly ClientMessage Instance = new ClientMessage();

            public Json.ImmutableJson Serialize(ServiceChronos.ClientMessage value)
            {
                if (value is ServiceChronos.Log log)
                    return Log.Instance.Serialize(log);
                throw new System.ArgumentException($"Unknown message type: {value.GetType()}");
            }

            public ServiceChronos.ClientMessage Deserialize(Json.ImmutableJson json)
            {
                var jsonObject = json.AsObject;
                string method = jsonObject["method"].AsString;
                switch (method)
                {
                    case "Log":
                        return Log.Instance.Deserialize(jsonObject);
                    default:
                        throw new System.MissingMethodException("ServiceChronos", method);
                }
            }
        }

        public sealed class Log : Json.Serialization.IJsonSerializer<ServiceChronos.Log>
        {
            public static readonly Log Instance = new Log();

            public Json.ImmutableJson Serialize(ServiceChronos.Log value)
            {
                return new Json.JsonObject
                {
                    ["method"] = "Log",
                    ["id"] = value.RpcId,
                    ["params"] = new Json.JsonArray
                    {
                        JsonSerializer.String.Serialize(value.App),
                        JsonSerializer.String.Serialize(value.Component),
                        JsonSerializer.String.Serialize(value.Branch),
                        JsonSerializer.String.Serialize(value.Version),
                        JsonSerializer.List(LogEntryJsonSerializer.Instance).Serialize(value.Logs)
                    }
                };
            }

            public ServiceChronos.Log Deserialize(Json.ImmutableJson json)
            {
                ServiceChronos.Log value = new ServiceChronos.Log();
                value.RpcId = json["id"].AsInt;
                var paramsArray = json["params"].AsArray;
                value.App = JsonSerializer.String.Deserialize(paramsArray[0]);
                value.Component = JsonSerializer.String.Deserialize(paramsArray[1]);
                value.Branch = JsonSerializer.String.Deserialize(paramsArray[2]);
                value.Version = JsonSerializer.String.Deserialize(paramsArray[3]);
                value.Logs = JsonSerializer.List(LogEntryJsonSerializer.Instance).Deserialize(paramsArray[4]);
                return value;
            }
        }

        public sealed class ServerMessage : Json.Serialization.IJsonSerializer<ServiceChronos.ServerMessage>
        {
            public static readonly ServerMessage Instance = new ServerMessage();

            public Json.ImmutableJson Serialize(ServiceChronos.ServerMessage value)
            {
                if (value is ServiceChronos.LogResponse logResponse)
                    return LogResponse.Instance.Serialize(logResponse);
                throw new System.ArgumentException($"Unknown message type: {value.GetType()}");
            }

            public ServiceChronos.ServerMessage Deserialize(Json.ImmutableJson json)
            {
                var jsonObject = json.AsObject;
                string method = jsonObject["method"].AsString;
                switch (method)
                {
                    case "Log":
                        return LogResponse.Instance.Deserialize(jsonObject);
                    default:
                        throw new System.MissingMethodException("ServiceChronos", method);
                }
            }
        }

        public sealed class LogResponse : Json.Serialization.IJsonSerializer<ServiceChronos.LogResponse>
        {
            public static readonly LogResponse Instance = new LogResponse();

            public Json.ImmutableJson Serialize(ServiceChronos.LogResponse value)
            {
                return new Json.JsonObject
                {
                    ["method"] = "Log",
                    ["id"] = value.RpcId,
                    ["result"] = new Json.JsonArray
                    {
                        JsonSerializer.Int.Serialize(value.Result.Loaded)
                    }
                };
            }

            public ServiceChronos.LogResponse Deserialize(Json.ImmutableJson json)
            {
                ServiceChronos.LogResponse value = new ServiceChronos.LogResponse();
                value.RpcId = json["id"].AsInt;
                if (json.AsObject.ContainsKey("error"))
                {
                    var errorJson = json["error"].AsObject;
                    var code = errorJson["code"].AsInt;
                    switch (code)
                    {
                        case 1:
                            value.Exception = InvalidDataJsonSerializer.Instance.Deserialize(errorJson["data"]);
                            break;
                        default:
                            var errorMessage = errorJson["message"].AsString;
                            value.Exception = new Igor.Services.UnknownRemoteException(errorMessage);
                            break;
                    }
                }
                else
                {
                    var resultArray = json["result"].AsArray;
                    value.Result = new ServiceChronos.LogResult();
                    value.Result.Loaded = JsonSerializer.Int.Deserialize(resultArray[0]);
                }
                return value;
            }
        }
    }
}
