// Author: Igor compiler
// Compiler version: igorc 2.1.4
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Igor.Web;

using JsonSerializer = Json.Serialization.JsonSerializer;
using HttpStatusCode = System.Net.HttpStatusCode;

namespace Scylla
{
    public sealed class ScyllaEnvelope
    {
        public List<Analytics.AnalyticsEvent> Events { get; set; }
    }

    public sealed class ScyllaResponse
    {
        public int IngestedCount { get; set; }
    }

    public sealed class ScyllaError : Igor.Services.CustomRemoteException
    {
        public string Error { get; set; }

        public string Info { get; set; }
    }

    public sealed class ScyllaEnvelopeJsonSerializer : Json.Serialization.IJsonSerializer<ScyllaEnvelope>
    {
        public static readonly ScyllaEnvelopeJsonSerializer Instance = new ScyllaEnvelopeJsonSerializer();

        public Json.ImmutableJson Serialize(ScyllaEnvelope value)
        {
            if (value == null)
                throw new System.ArgumentNullException("value");
            if (value.Events == null)
                throw new System.ArgumentException("Required property Events is null", "value");
            var json = new Json.JsonObject();
            json["events"] = JsonSerializer.List(Analytics.AnalyticsEventJsonSerializer.Instance).Serialize(value.Events);
            return json;
        }

        public ScyllaEnvelope Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            var result = new ScyllaEnvelope();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ScyllaEnvelope value)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            if (value == null)
                throw new System.ArgumentNullException("value");
            Json.ImmutableJson jsonEvents;
            if (json.AsObject.TryGetValue("events", out jsonEvents) && !jsonEvents.IsNull)
                value.Events = JsonSerializer.List(Analytics.AnalyticsEventJsonSerializer.Instance).Deserialize(jsonEvents);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            return json.IsObject;
        }
    }

    public sealed class ScyllaResponseJsonSerializer : Json.Serialization.IJsonSerializer<ScyllaResponse>
    {
        public static readonly ScyllaResponseJsonSerializer Instance = new ScyllaResponseJsonSerializer();

        public Json.ImmutableJson Serialize(ScyllaResponse value)
        {
            if (value == null)
                throw new System.ArgumentNullException("value");

            var json = new Json.JsonObject();
            json["ingested_count"] = JsonSerializer.Int.Serialize(value.IngestedCount);
            return json;
        }

        public ScyllaResponse Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            var result = new ScyllaResponse();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ScyllaResponse value)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            if (value == null)
                throw new System.ArgumentNullException("value");
            value.IngestedCount = JsonSerializer.Int.Deserialize(json["ingested_count"]);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            return json.IsObject;
        }
    }

    public sealed class ScyllaErrorJsonSerializer : Json.Serialization.IJsonSerializer<ScyllaError>
    {
        public static readonly ScyllaErrorJsonSerializer Instance = new ScyllaErrorJsonSerializer();

        public Json.ImmutableJson Serialize(ScyllaError value)
        {
            if (value == null)
                throw new System.ArgumentNullException("value");

            var json = new Json.JsonObject();
            if (value.Error != null)
                json["error"] = JsonSerializer.String.Serialize(value.Error);
            if (value.Info != null)
                json["info"] = JsonSerializer.String.Serialize(value.Info);
            return json;
        }

        public ScyllaError Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            var result = new ScyllaError();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ScyllaError value)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            if (value == null)
                throw new System.ArgumentNullException("value");
            Json.ImmutableJson jsonError;
            if (json.AsObject.TryGetValue("error", out jsonError) && !jsonError.IsNull)
                value.Error = JsonSerializer.String.Deserialize(jsonError);
            Json.ImmutableJson jsonInfo;
            if (json.AsObject.TryGetValue("info", out jsonInfo) && !jsonInfo.IsNull)
                value.Info = JsonSerializer.String.Deserialize(jsonInfo);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            return json.IsObject;
        }
    }

    public class ScyllaApi : System.IDisposable
    {
        protected HttpClient HttpClient { get; }

        public ScyllaApi(HttpClient httpClient)
        {
            HttpClient = httpClient;
        }

        public void Dispose()
        {
              Dispose(true);
              System.GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            HttpClient.Dispose();
        }

        public async Task<ScyllaResponse> SendEventsAsync(ScyllaEnvelope requestContent, string appCode, string apiKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (requestContent == null)
                throw new System.ArgumentNullException("requestContent");
            if (apiKey == null)
                throw new System.ArgumentNullException("apiKey");
            using (var httpRequest = new HttpRequestMessage(HttpMethod.Post, $"{appCode}"))
            {
                httpRequest.Content = new StringContent(ScyllaEnvelopeJsonSerializer.Instance.Serialize(requestContent).ToString());
                httpRequest.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                httpRequest.Headers.Add("X-Api-Key", apiKey);
                using (var httpResponse = await HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false))
                {
                    switch (httpResponse.StatusCode)
                    {
                        case HttpStatusCode.Created:
                            {
                                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false))
                                using (var reader = new StreamReader(responseStream))
                                    return ScyllaResponseJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                            }
                        case HttpStatusCode.BadRequest:
                            {
                                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false))
                                using (var reader = new StreamReader(responseStream))
                                    throw ScyllaErrorJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                            }
                        case HttpStatusCode.Forbidden:
                            {
                                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false))
                                using (var reader = new StreamReader(responseStream))
                                    throw ScyllaErrorJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                            }
                        case HttpStatusCode.InternalServerError:
                            {
                                using (var responseStream = await httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false))
                                using (var reader = new StreamReader(responseStream))
                                    throw ScyllaErrorJsonSerializer.Instance.Deserialize(Json.JsonParser.Parse(reader));
                            }
                        default:
                            throw new HttpRequestException(string.Format("Unexpected status code: {0} {1}", httpResponse.StatusCode, httpResponse.ReasonPhrase));
                    }
                }
            }
        }
    }
}
