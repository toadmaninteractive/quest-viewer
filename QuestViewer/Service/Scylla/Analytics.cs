// Author: Igor compiler
// Compiler version: igorc 2.1.4
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;
using System.Text;

using JsonSerializer = Json.Serialization.JsonSerializer;

namespace Analytics
{
    public enum EventName
    {
        SessionStart = 1,
    }

    public abstract class AnalyticsEvent
    {
        public abstract EventName EventName { get; }

        public string Datetime { get; set; }

        public string Branch { get; set; }

        public int Revision { get; set; }

        public string Username { get; set; }

        public string InstallationId { get; set; }

        protected AnalyticsEvent()
        {
            Username = "";
        }
    }

    public sealed class SessionStart : AnalyticsEvent
    {
        public override EventName EventName
        {
            get { return EventName.SessionStart; }
        }

        public SessionStart()
        {
        }
    }

    public sealed class EventNameJsonSerializer : Json.Serialization.IJsonSerializer<EventName>, Json.Serialization.IJsonKeySerializer<EventName>
    {
        public static readonly EventNameJsonSerializer Instance = new EventNameJsonSerializer();

        public Json.ImmutableJson Serialize(EventName value)
        {
            return SerializeKey(value);
        }

        public EventName Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            return DeserializeKey(json.AsString);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            return json.IsString;
        }

        public string SerializeKey(EventName value)
        {
            switch (value)
            {
                case EventName.SessionStart: return "session_start";
                default: throw new System.ArgumentOutOfRangeException("value");
            }
        }

        public EventName DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "session_start": return EventName.SessionStart;
                default: throw new System.ArgumentOutOfRangeException("jsonKey");
            }
        }
    }

    public sealed class AnalyticsEventJsonSerializer : Json.Serialization.IJsonSerializer<AnalyticsEvent>
    {
        public static readonly AnalyticsEventJsonSerializer Instance = new AnalyticsEventJsonSerializer();

        public Json.ImmutableJson Serialize(AnalyticsEvent value)
        {
            if (value == null)
                throw new System.ArgumentNullException("value");
            switch (value.EventName)
            {
                case EventName.SessionStart: return SessionStartJsonSerializer.Instance.Serialize((SessionStart)value);
                default: throw new System.ArgumentException("Invalid variant tag");
            }
        }

        public AnalyticsEvent Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            EventName eventName = EventNameJsonSerializer.Instance.Deserialize(json["event_name"]);
            switch (eventName)
            {
                case EventName.SessionStart: return SessionStartJsonSerializer.Instance.Deserialize(json);
                default: throw new System.ArgumentException("Invalid variant tag");
            }
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            return json.IsObject && json.AsObject.ContainsKey("event_name");
        }
    }

    public sealed class SessionStartJsonSerializer : Json.Serialization.IJsonSerializer<SessionStart>
    {
        public static readonly SessionStartJsonSerializer Instance = new SessionStartJsonSerializer();

        public Json.ImmutableJson Serialize(SessionStart value)
        {
            if (value == null)
                throw new System.ArgumentNullException("value");

            if (value.Datetime == null)
                throw new System.ArgumentException("Required property Datetime is null", "value");
            if (value.Branch == null)
                throw new System.ArgumentException("Required property Branch is null", "value");

            if (value.Username == null)
                throw new System.ArgumentException("Required property Username is null", "value");
            if (value.InstallationId == null)
                throw new System.ArgumentException("Required property InstallationId is null", "value");
            var json = new Json.JsonObject();
            json["event_name"] = EventNameJsonSerializer.Instance.Serialize(value.EventName);
            json["datetime"] = JsonSerializer.String.Serialize(value.Datetime);
            json["branch"] = JsonSerializer.String.Serialize(value.Branch);
            json["revision"] = JsonSerializer.Int.Serialize(value.Revision);
            json["username"] = JsonSerializer.String.Serialize(value.Username);
            json["installation_id"] = JsonSerializer.String.Serialize(value.InstallationId);
            return json;
        }

        public SessionStart Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            var result = new SessionStart();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, SessionStart value)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            if (value == null)
                throw new System.ArgumentNullException("value");
            value.Datetime = JsonSerializer.String.Deserialize(json["datetime"]);
            value.Branch = JsonSerializer.String.Deserialize(json["branch"]);
            value.Revision = JsonSerializer.Int.Deserialize(json["revision"]);
            Json.ImmutableJson jsonUsername;
            if (json.AsObject.TryGetValue("username", out jsonUsername) && !jsonUsername.IsNull)
                value.Username = JsonSerializer.String.Deserialize(jsonUsername);
            value.InstallationId = JsonSerializer.String.Deserialize(json["installation_id"]);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException("json");
            return json.IsObject;
        }
    }

    public sealed class EventNameStringSerializer : Igor.Serialization.IStringSerializer<EventName>
    {
        public static readonly EventNameStringSerializer Instance = new EventNameStringSerializer();

        public string Serialize(EventName value)
        {
            switch (value)
            {
                case EventName.SessionStart: return "session_start";
                default: throw new System.ArgumentOutOfRangeException("value");
            }
        }

        public void Serialize(StringBuilder stringBuilder, EventName value)
        {
            stringBuilder.Append(Serialize(value));
        }

        public EventName Deserialize(string value)
        {
            switch (value)
            {
                case "session_start": return EventName.SessionStart;
                default: throw new System.ArgumentOutOfRangeException("value");
            }
        }
    }
}
